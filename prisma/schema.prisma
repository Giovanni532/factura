// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id            String        @id @default(uuid())
  email         String        @unique
  name          String?
  createdAt     DateTime      @default(now())
  role          Role          @default(USER)
  emailVerified Boolean
  image         String?
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  businesses    Business[]
  clients       Client[]
  items         Item[]
  quotes        Quote[]
  invoices      Invoice[]
  subscriptions Subscription?
  Payment       Payment[]

  @@map("users")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Business {
  id         String   @id @default(cuid())
  name       String
  address    String?
  city       String?
  postalCode String?
  country    String?
  logoUrl    String?
  taxId      String?
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Client {
  id         String    @id @default(cuid())
  name       String
  email      String
  phone      String?
  company    String?
  address    String?
  city       String?
  postalCode String?
  country    String?
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  quotes     Quote[]
  invoices   Invoice[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Item {
  id          String        @id @default(cuid())
  name        String
  description String?
  unitPrice   Float
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  quoteItems  QuoteItem[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  InvoiceItem InvoiceItem[]
}

model Quote {
  id          String      @id @default(cuid())
  client      Client      @relation(fields: [clientId], references: [id])
  clientId    String
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  note        String?     @default("")
  status      QuoteStatus @default(DRAFT)
  total       Float       @default(0)
  validUntil  DateTime?
  quoteItems  QuoteItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Invoice     Invoice?    @relation(fields: [invoiceId], references: [id])
  invoiceId   String?
  convertedTo Invoice?    @relation("ConvertedInvoice")
}

model QuoteItem {
  id        String @id @default(cuid())
  quote     Quote  @relation(fields: [quoteId], references: [id])
  quoteId   String
  item      Item   @relation(fields: [itemId], references: [id])
  itemId    String
  quantity  Int    @default(1)
  unitPrice Float
}

model Invoice {
  id            String        @id @default(cuid())
  client        Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId      String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  status        InvoiceStatus @default(PENDING)
  dueDate       DateTime
  total         Float
  totalHT       Float         @default(0) // Total hors taxe
  vatRate       Float         @default(20) // Taux de TVA en pourcentage
  vatAmount     Float         @default(0) // Montant de la TVA
  invoiceItems  InvoiceItem[]
  payments      Payment[]
  createdFrom   Quote?        @relation("ConvertedInvoice", fields: [createdFromId], references: [id])
  createdFromId String?       @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Quote         Quote[]

  @@index([clientId])
  @@index([userId])
}

model InvoiceItem {
  id        String  @id @default(cuid())
  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId String
  item      Item    @relation(fields: [itemId], references: [id])
  itemId    String
  quantity  Int     @default(1)
  unitPrice Float
}

model Payment {
  id        String   @id @default(cuid())
  amount    Float
  paidAt    DateTime @default(now())
  invoice   Invoice  @relation(fields: [invoiceId], references: [id])
  invoiceId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  method    String?
  createdAt DateTime @default(now())
}

model Subscription {
  id               String   @id @default(cuid())
  user             User     @relation(fields: [userId], references: [id])
  userId           String   @unique
  plan             String   @default("free")
  status           String   @default("active")
  currentPeriodEnd DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

enum QuoteStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  CONVERTED
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELED
}
